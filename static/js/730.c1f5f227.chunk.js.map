{"version":3,"file":"static/js/730.c1f5f227.chunk.js","mappings":"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","sources":["services/customerService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:8080/api';\r\n\r\nclass CustomerService {\r\n  constructor() {\r\n    this.axiosInstance = axios.create({\r\n      baseURL: API_BASE_URL,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Add request interceptor to include auth token\r\n    this.axiosInstance.interceptors.request.use(\r\n      (config) => {\r\n        const token = localStorage.getItem('authToken');\r\n        if (token) {\r\n          config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n      },\r\n      (error) => Promise.reject(error)\r\n    );\r\n  }\r\n\r\n  async getAllCustomers(page = null, size = null, search = null) {\r\n    try {\r\n      const params = {};\r\n      if (page !== null) params.page = page;\r\n      if (size !== null) params.size = size;\r\n      if (search) params.search = search;\r\n\r\n      const response = await this.axiosInstance.get('/customers', { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching customers:', error);\r\n      // Return mock data as fallback\r\n      return this.getMockCustomers();\r\n    }\r\n  }\r\n\r\n  async getCustomerById(id) {\r\n    try {\r\n      const response = await this.axiosInstance.get(`/customers/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching customer:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async createCustomer(customer) {\r\n    try {\r\n      const response = await this.axiosInstance.post('/customers', customer);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating customer:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async updateCustomer(id, customer) {\r\n    try {\r\n      const response = await this.axiosInstance.put(`/customers/${id}`, customer);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating customer:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async deleteCustomer(id) {\r\n    try {\r\n      await this.axiosInstance.delete(`/customers/${id}`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting customer:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getTopCustomers(limit = 10) {\r\n    try {\r\n      const response = await this.axiosInstance.get('/customers/top-spenders', {\r\n        params: { limit }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching top customers:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async getCustomerStats() {\r\n    try {\r\n      const response = await this.axiosInstance.get('/customers/stats');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching customer stats:', error);\r\n      return {\r\n        totalCustomers: 0,\r\n        totalRevenue: 0,\r\n        returningCustomers: [],\r\n        newCustomers: []\r\n      };\r\n    }\r\n  }\r\n\r\n  // Fallback mock data\r\n  getMockCustomers() {\r\n    return [\r\n      {\r\n        id: 1,\r\n        customerId: 'CUST-001',\r\n        firstName: 'John',\r\n        lastName: 'Smith',\r\n        email: 'john.smith@example.com',\r\n        phone: '+1 (555) 123-4567',\r\n        address: '123 Main St',\r\n        city: 'New York',\r\n        state: 'NY',\r\n        country: 'USA',\r\n        postalCode: '10001',\r\n        totalSpent: 1250.75,\r\n        ordersCount: 8,\r\n        createdAt: new Date('2023-06-15T10:30:00'),\r\n        lastOrderDate: new Date('2024-01-15T14:20:00'),\r\n      },\r\n      {\r\n        id: 2,\r\n        customerId: 'CUST-002',\r\n        firstName: 'Jane',\r\n        lastName: 'Doe',\r\n        email: 'jane.doe@example.com',\r\n        phone: '+1 (555) 987-6543',\r\n        address: '456 Oak Avenue',\r\n        city: 'Los Angeles',\r\n        state: 'CA',\r\n        country: 'USA',\r\n        postalCode: '90210',\r\n        totalSpent: 875.25,\r\n        ordersCount: 5,\r\n        createdAt: new Date('2023-08-22T14:45:00'),\r\n        lastOrderDate: new Date('2024-01-16T11:30:00'),\r\n      },\r\n      {\r\n        id: 3,\r\n        customerId: 'CUST-003',\r\n        firstName: 'Mike',\r\n        lastName: 'Johnson',\r\n        email: 'mike.johnson@example.com',\r\n        phone: '+1 (555) 456-7890',\r\n        address: '789 Pine Street',\r\n        city: 'Chicago',\r\n        state: 'IL',\r\n        country: 'USA',\r\n        postalCode: '60601',\r\n        totalSpent: 2150.00,\r\n        ordersCount: 12,\r\n        createdAt: new Date('2023-03-10T09:20:00'),\r\n        lastOrderDate: new Date('2024-01-14T16:45:00'),\r\n      }\r\n    ];\r\n  }\r\n}\r\n\r\nexport default new CustomerService();\r\n"],"names":["constructor","this","axiosInstance","axios","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","getAllCustomers","page","arguments","length","undefined","size","search","params","get","data","console","getMockCustomers","getCustomerById","id","createCustomer","customer","post","updateCustomer","put","deleteCustomer","delete","getTopCustomers","limit","getCustomerStats","totalCustomers","totalRevenue","returningCustomers","newCustomers","customerId","firstName","lastName","email","phone","address","city","state","country","postalCode","totalSpent","ordersCount","createdAt","Date","lastOrderDate"],"sourceRoot":""}