version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: xeno-mysql
    environment:
      MYSQL_ROOT_PASSWORD: Sai@2004
      MYSQL_DATABASE: xeno_shopify
      MYSQL_USER: xeno_user
      MYSQL_PASSWORD: xeno_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seed-data.sql:/docker-entrypoint-initdb.d/02-seed-data.sql
    networks:
      - xeno-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Spring Boot Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: xeno-backend
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/xeno_shopify?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=Sai@2004
      - JWT_SECRET=xeno-shopify-secret-key-2025-internship-assignment-docker
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - xeno-network
    volumes:
      - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: xeno-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8080/api
      - REACT_APP_ENV=docker
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - xeno-network
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Redis (Optional - for caching and session management)
  redis:
    image: redis:7-alpine
    container_name: xeno-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - xeno-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # Nginx (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: xeno-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - xeno-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  xeno-network:
    driver: bridge
