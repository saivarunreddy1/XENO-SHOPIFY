{"version":3,"file":"static/js/538.81db8dc8.chunk.js","mappings":"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","sources":["services/orderService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:8080/api';\r\n\r\nclass OrderService {\r\n  constructor() {\r\n    this.axiosInstance = axios.create({\r\n      baseURL: API_BASE_URL,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n\r\n    // Add request interceptor to include auth token\r\n    this.axiosInstance.interceptors.request.use(\r\n      (config) => {\r\n        const token = localStorage.getItem('authToken');\r\n        if (token) {\r\n          config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n      },\r\n      (error) => Promise.reject(error)\r\n    );\r\n  }\r\n\r\n  async getAllOrders(page = null, size = null, status = null, customerId = null, startDate = null, endDate = null) {\r\n    try {\r\n      const params = {};\r\n      if (page !== null) params.page = page;\r\n      if (size !== null) params.size = size;\r\n      if (status) params.status = status;\r\n      if (customerId) params.customerId = customerId;\r\n      if (startDate) params.startDate = startDate.toISOString();\r\n      if (endDate) params.endDate = endDate.toISOString();\r\n\r\n      const response = await this.axiosInstance.get('/orders', { params });\r\n      return response.data.map(order => ({\r\n        ...order,\r\n        orderDate: new Date(order.orderDate),\r\n        shippedDate: order.shippedDate ? new Date(order.shippedDate) : null,\r\n        deliveredDate: order.deliveredDate ? new Date(order.deliveredDate) : null,\r\n        customer: order.customer || { fullName: order.customerName || 'Unknown', email: order.customerEmail || '' }\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching orders:', error);\r\n      // Return mock data as fallback\r\n      return this.getMockOrders();\r\n    }\r\n  }\r\n\r\n  async getOrderById(id) {\r\n    try {\r\n      const response = await this.axiosInstance.get(`/orders/${id}`);\r\n      return {\r\n        ...response.data,\r\n        orderDate: new Date(response.data.orderDate),\r\n        shippedDate: response.data.shippedDate ? new Date(response.data.shippedDate) : null,\r\n        deliveredDate: response.data.deliveredDate ? new Date(response.data.deliveredDate) : null,\r\n      };\r\n    } catch (error) {\r\n      console.error('Error fetching order:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async createOrder(order) {\r\n    try {\r\n      const response = await this.axiosInstance.post('/orders', order);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating order:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async updateOrder(id, order) {\r\n    try {\r\n      const response = await this.axiosInstance.put(`/orders/${id}`, order);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating order:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async deleteOrder(id) {\r\n    try {\r\n      await this.axiosInstance.delete(`/orders/${id}`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting order:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getRecentOrders(limit = 10) {\r\n    try {\r\n      const response = await this.axiosInstance.get('/orders/recent', {\r\n        params: { limit }\r\n      });\r\n      return response.data.map(order => ({\r\n        ...order,\r\n        orderDate: new Date(order.orderDate),\r\n        shippedDate: order.shippedDate ? new Date(order.shippedDate) : null,\r\n        deliveredDate: order.deliveredDate ? new Date(order.deliveredDate) : null,\r\n        customer: order.customer || { fullName: order.customerName || 'Unknown', email: order.customerEmail || '' }\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching recent orders:', error);\r\n      return this.getMockOrders().slice(0, limit);\r\n    }\r\n  }\r\n\r\n  async getOrderStats(startDate = null, endDate = null) {\r\n    try {\r\n      const params = {};\r\n      if (startDate) params.startDate = startDate.toISOString();\r\n      if (endDate) params.endDate = endDate.toISOString();\r\n\r\n      const response = await this.axiosInstance.get('/orders/stats', { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching order stats:', error);\r\n      return {\r\n        totalOrders: 0,\r\n        totalRevenue: 0,\r\n        statusCounts: {},\r\n        recentOrders: [],\r\n        periodOrders: 0,\r\n        periodRevenue: 0\r\n      };\r\n    }\r\n  }\r\n\r\n  async getDailyAnalytics(startDate, endDate) {\r\n    try {\r\n      const response = await this.axiosInstance.get('/orders/analytics/daily', {\r\n        params: {\r\n          startDate: startDate.toISOString(),\r\n          endDate: endDate.toISOString()\r\n        }\r\n      });\r\n      return response.data.map(row => ({\r\n        date: new Date(row[0]),\r\n        orderCount: row[1],\r\n        revenue: row[2]\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching daily analytics:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Order lifecycle operations\r\n  async confirmOrder(orderId) {\r\n    try {\r\n      const response = await this.axiosInstance.post(`/orders/${orderId}/confirm`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error confirming order:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async shipOrder(orderId, trackingNumber) {\r\n    try {\r\n      const response = await this.axiosInstance.post(`/orders/${orderId}/ship`, null, {\r\n        params: { trackingNumber }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error shipping order:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async deliverOrder(orderId) {\r\n    try {\r\n      const response = await this.axiosInstance.post(`/orders/${orderId}/deliver`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error delivering order:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async cancelOrder(orderId, reason) {\r\n    try {\r\n      const response = await this.axiosInstance.post(`/orders/${orderId}/cancel`, null, {\r\n        params: { reason }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error cancelling order:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Fallback mock data\r\n  getMockOrders() {\r\n    return [\r\n      {\r\n        id: 1,\r\n        orderId: 'ORD-001',\r\n        customer: { fullName: 'John Smith', email: 'john@example.com' },\r\n        status: 'SHIPPED',\r\n        totalAmount: 299.99,\r\n        orderDate: new Date('2024-01-15T10:30:00'),\r\n        shippedDate: new Date('2024-01-16T14:20:00'),\r\n        trackingNumber: 'TRK123456789',\r\n        shippingAddress: '123 Main St, City, State 12345',\r\n        orderItems: [\r\n          { productName: 'Wireless Headphones', quantity: 1, unitPrice: 199.99 },\r\n          { productName: 'Phone Case', quantity: 2, unitPrice: 50.00 }\r\n        ]\r\n      },\r\n      {\r\n        id: 2,\r\n        orderId: 'ORD-002',\r\n        customer: { fullName: 'Jane Doe', email: 'jane@example.com' },\r\n        status: 'PROCESSING',\r\n        totalAmount: 149.50,\r\n        orderDate: new Date('2024-01-16T09:15:00'),\r\n        shippingAddress: '456 Oak Ave, Town, State 67890',\r\n        orderItems: [\r\n          { productName: 'Smart Watch', quantity: 1, unitPrice: 149.50 }\r\n        ]\r\n      },\r\n      {\r\n        id: 3,\r\n        orderId: 'ORD-003',\r\n        customer: { fullName: 'Mike Johnson', email: 'mike@example.com' },\r\n        status: 'DELIVERED',\r\n        totalAmount: 75.25,\r\n        orderDate: new Date('2024-01-14T16:45:00'),\r\n        shippedDate: new Date('2024-01-15T11:30:00'),\r\n        deliveredDate: new Date('2024-01-16T15:20:00'),\r\n        trackingNumber: 'TRK987654321',\r\n        shippingAddress: '789 Pine St, Village, State 11111',\r\n        orderItems: [\r\n          { productName: 'Bluetooth Speaker', quantity: 1, unitPrice: 75.25 }\r\n        ]\r\n      },\r\n      {\r\n        id: 4,\r\n        orderId: 'ORD-004',\r\n        customer: { fullName: 'Sarah Wilson', email: 'sarah@example.com' },\r\n        status: 'PENDING',\r\n        totalAmount: 420.00,\r\n        orderDate: new Date('2024-01-16T14:20:00'),\r\n        shippingAddress: '321 Elm St, City, State 22222',\r\n        orderItems: [\r\n          { productName: 'Laptop Stand', quantity: 2, unitPrice: 89.99 },\r\n          { productName: 'Wireless Mouse', quantity: 1, unitPrice: 49.99 },\r\n          { productName: 'Keyboard', quantity: 1, unitPrice: 189.99 }\r\n        ]\r\n      }\r\n    ];\r\n  }\r\n}\r\n\r\nexport default new OrderService();\r\n"],"names":["constructor","this","axiosInstance","axios","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","concat","error","Promise","reject","getAllOrders","page","arguments","length","undefined","size","status","customerId","startDate","endDate","params","toISOString","get","data","map","order","_objectSpread","orderDate","Date","shippedDate","deliveredDate","customer","fullName","customerName","email","customerEmail","console","getMockOrders","getOrderById","id","response","createOrder","post","updateOrder","put","deleteOrder","delete","getRecentOrders","limit","slice","getOrderStats","totalOrders","totalRevenue","statusCounts","recentOrders","periodOrders","periodRevenue","getDailyAnalytics","row","date","orderCount","revenue","confirmOrder","orderId","shipOrder","trackingNumber","deliverOrder","cancelOrder","reason","totalAmount","shippingAddress","orderItems","productName","quantity","unitPrice"],"sourceRoot":""}